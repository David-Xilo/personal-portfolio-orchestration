name: Deploy Railway Infrastructure

on:
  workflow_dispatch:
    inputs:
      backend_version:
        description: 'Backend Docker image version (e.g., v1.2.3)'
        default: 'latest'
        required: true
        type: string
      frontend_version:
        description: 'Frontend Docker image version (e.g., v2.1.0)'
        default: 'latest'
        required: true
        type: string
      migration_version:
        description: 'Migration Docker image version (e.g., v1.0.5)'
        default: 'latest'
        required: true
        type: string
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production

env:
  RAILWAY_PROJECT_ID: 03936bb2-d116-4765-beeb-c29074266234
  DOCKER_REGISTRY: xilo
  RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
  BACKEND_VERSION: ${{ inputs.backend_version }}
  RAILWAY_API_TOKEN: ${{ secrets.RAILWAY_API_TOKEN }}

jobs:
  check-docker-images:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Verify Docker images exist
        run: |
          echo "üîç Verifying Docker images exist on Docker Hub..."
          
          BACKEND_IMAGE="${DOCKER_REGISTRY}/safehouse-backend-main:${{ inputs.backend_version }}"
          FRONTEND_IMAGE="${DOCKER_REGISTRY}/safehouse-frontend-main:${{ inputs.frontend_version }}"
          MIGRATION_IMAGE="${DOCKER_REGISTRY}/safehouse-migrations:${{ inputs.migration_version }}"
          
          # Check backend image
          if ! docker manifest inspect $BACKEND_IMAGE > /dev/null 2>&1; then
            echo "‚ùå Backend image not found: $BACKEND_IMAGE"
            exit 1
          fi
          
          # Check frontend image  
          if ! docker manifest inspect $FRONTEND_IMAGE > /dev/null 2>&1; then
            echo "‚ùå Frontend image not found: $FRONTEND_IMAGE"
            exit 1
          fi
          
          # Check migration image
          if ! docker manifest inspect $MIGRATION_IMAGE > /dev/null 2>&1; then
            echo "‚ùå Migration image not found: $MIGRATION_IMAGE"
            exit 1
          fi
          
          echo "‚úÖ All Docker images verified successfully"

  run-migrations:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    container: ghcr.io/railwayapp/cli:3.14.0
    needs: check-docker-images
#    env:
#      RAILWAY_API_TOKEN: ${{ secrets.RAILWAY_API_TOKEN }}
#      RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
    steps:
      - name: Run database migrations
        run: |
          TIMESTAMP=$(date +%s)
          SERVICE_NAME="migration-${TIMESTAMP}"
          echo "üöÄ Deploying migration service: $SERVICE_NAME"
          railway add \
            --service "$SERVICE_NAME" \
            --image "${{ env.DOCKER_REGISTRY }}/safehouse-migrations:${{ inputs.migration_version }}" \
            --variables "DATABASE_URL=${DATABASE_URL}" \
            --variables "MIGRATION_TIMEOUT=300" \
            --variables "MIGRATION_VERBOSE=true" \
            --version
          sleep 10

  deploy-backend:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: run-migrations
    container: ghcr.io/railwayapp/cli:3.14.0
#    env:
#      RAILWAY_API_TOKEN: ${{ secrets.RAILWAY_API_TOKEN }}
#      RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
    steps:
      - name: Update or create service image
        run: |
          echo "üöÄ Deploying backend image: $DOCKER_REGISTRY/safehouse-backend-main:$BACKEND_VERSION"
          railway add \
            --service safehouse-backend-main \
            --image "${DOCKER_REGISTRY}/safehouse-backend-main:${BACKEND_VERSION}" \
            --variables "PORT=8080" \
            --variables "DATABASE_URL=${DATABASE_URL}"

      - name: Deploy new Docker image
        run: |
          railway up --service safehouse-backend-main

  deploy-frontend:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: deploy-backend
    container: ghcr.io/railwayapp/cli:3.14.0
#    env:
#      RAILWAY_API_TOKEN: ${{ secrets.RAILWAY_API_TOKEN }}
#      RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
    steps:
      - name: Deploy frontend
        run: |
          echo "üöÄ Deploying frontend image: ${{ env.DOCKER_REGISTRY }}/safehouse-frontend-main:${{ inputs.frontend_version }}"
          railway add \
              --service safehouse-frontend-main \
              --image "${{ env.DOCKER_REGISTRY }}/safehouse-frontend-main:${{ inputs.frontend_version }}"
          railway up --service safehouse-frontend-main
          echo "‚úÖ Frontend deployment initiated."

  post-deployment:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: deploy-frontend
    container: ghcr.io/railwayapp/cli:3.14.0
    if: always()
#    env:
#      RAILWAY_API_TOKEN: ${{ secrets.RAILWAY_API_TOKEN }}
#      RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
    steps:
      - name: Show status and usage
        run: |
          echo "üìä Final deployment status:"
          railway status
          echo "üí∞ Current usage:"
          railway usage
          echo "üéâ Done! Check it here:"
          echo "https://railway.app/project/${{ env.RAILWAY_PROJECT_ID }}"
