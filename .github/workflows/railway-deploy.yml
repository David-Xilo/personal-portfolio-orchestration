name: Deploy Railway Infrastructure

on:
  workflow_dispatch:
    inputs:
      backend_version:
        description: 'Backend Docker image version (e.g., v1.2.3)'
        default: 'latest'
        required: true
        type: string
      frontend_version:
        description: 'Frontend Docker image version (e.g., v2.1.0)'
        default: 'latest'
        required: true
        type: string
      migration_version:
        description: 'Migration Docker image version (e.g., v1.0.5)'
        default: 'latest'
        required: true
        type: string
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production

env:
  RAILWAY_PROJECT_ID: 03936bb2-d116-4765-beeb-c29074266234
  DOCKER_REGISTRY: xilo

jobs:
  check-docker-images:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Verify Docker images exist
        run: |
          echo "üîç Verifying Docker images exist on Docker Hub..."
          
          # Check backend image
          if ! docker manifest inspect ${{ needs.validate-inputs.outputs.backend_image }} > /dev/null 2>&1; then
            echo "‚ùå Backend image not found: ${{ needs.validate-inputs.outputs.backend_image }}"
            exit 1
          fi
          
          # Check frontend image  
          if ! docker manifest inspect ${{ needs.validate-inputs.outputs.frontend_image }} > /dev/null 2>&1; then
            echo "‚ùå Frontend image not found: ${{ needs.validate-inputs.outputs.frontend_image }}"
            exit 1
          fi
          
          # Check migration image
          if ! docker manifest inspect ${{ needs.validate-inputs.outputs.migration_image }} > /dev/null 2>&1; then
            echo "‚ùå Migration image not found: ${{ needs.validate-inputs.outputs.migration_image }}"
            exit 1
          fi
          
          echo "‚úÖ All Docker images verified successfully"

  infrastructure-check:
    runs-on: ubuntu-latest
    container: ghcr.io/railwayapp/cli:latest
    timeout-minutes: 10
    env:
      RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
    steps:
      - uses: actions/checkout@v4
      - name: Ensure PostgreSQL service exists
        run: |
          echo "üêò Ensuring PostgreSQL service exists..."
          if ! railway service list | grep -q postgres; then
            railway add postgres
          else
            echo "‚úÖ PostgreSQL service already exists"
          fi

  run-migrations:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    container: ghcr.io/railwayapp/cli:latest
    needs: [check-docker-images, infrastructure-check]
    env:
      RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
    steps:
      - name: Run database migrations
        run: |
          TIMESTAMP=$(date +%s)
          SERVICE_NAME="migration-${TIMESTAMP}"
          echo "üöÄ Deploying migration service: $SERVICE_NAME"
          railway up \
            --service "$SERVICE_NAME" \
            --image "${{ env.DOCKER_REGISTRY }}/safehouse-migrations:${{ inputs.migration_version }}" \
            --detach
          railway variables copy --service postgres --service "$SERVICE_NAME" DATABASE_URL
          railway variables set --service "$SERVICE_NAME" MIGRATION_TIMEOUT=300
          railway variables set --service "$SERVICE_NAME" MIGRATION_VERBOSE=true

  deploy-backend:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: run-migrations
    env:
      RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
    steps:
      - name: Deploy backend
        run: |
          echo "üöÄ Deploying backend image: ${{ env.DOCKER_REGISTRY }}/safehouse-main-back:${{ inputs.backend_version }}"
          railway up \
            --service safehouse-main-back \
            --image "${{ env.DOCKER_REGISTRY }}/safehouse-main-back:${{ inputs.backend_version }}" \
            --detach
          railway variables set --service safehouse-main-back PORT=8080
          railway variables set --service safehouse-main-back GIN_MODE=release
          railway variables copy --service postgres --service safehouse-main-back DATABASE_URL
          echo "‚úÖ Backend deployment initiated."

  deploy-frontend:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: deploy-backend
    env:
      RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
    steps:
      - name: Deploy frontend
        run: |
          echo "üöÄ Deploying frontend image: ${{ env.DOCKER_REGISTRY }}/safehouse-main-front:${{ inputs.frontend_version }}"
          railway up \
            --service safehouse-main-front \
            --image "${{ env.DOCKER_REGISTRY }}/safehouse-main-front:${{ inputs.frontend_version }}" \
            --detach
          echo "‚úÖ Frontend deployment initiated."

  post-deployment:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: deploy-frontend
    if: always()
    env:
      RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
    steps:
      - name: Show status and usage
        run: |
          echo "üìä Final deployment status:"
          railway status
          echo "üí∞ Current usage:"
          railway usage
          echo "üéâ Done! Check it here:"
          echo "https://railway.app/project/${{ env.RAILWAY_PROJECT_ID }}"
