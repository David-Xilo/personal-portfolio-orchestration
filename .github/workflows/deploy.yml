name: Infrastructure Deployment

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy
      confirm_apply:
        description: 'Type "yes" to confirm apply/destroy'
        required: false
        default: 'no'
        type: string
      migration_image_tag:
        description: 'Migration image tag to use (e.g., latest, v1.0.0, commit-sha)'
        required: true
        default: 'latest'
        type: string
      backend_image_tag:
        description: 'Backend image tag to use (e.g., latest, v1.0.0, commit-sha)'
        required: false
        default: 'latest'
        type: string
      frontend_image_tag:
        description: 'Frontend image tag to use (e.g., latest, v1.0.0, commit-sha)'
        required: false
        default: 'latest'
        type: string

env:
  PROJECT_ID: "personal-portfolio-safehouse"
  SERVICE_ACCOUNT_EMAIL: 'safehouse-terraform-cicd@personal-portfolio-safehouse.iam.gserviceaccount.com'
  WORKLOAD_IDENTITY_PROVIDER: 'projects/942519139037/locations/global/workloadIdentityPools/safehouse-github-pool/providers/safehouse-github-provider'

jobs:
  validate:
    name: Terraform Validate
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: '${{ env.WORKLOAD_IDENTITY_PROVIDER }}'
          service_account: '${{ env.SERVICE_ACCOUNT_EMAIL }}'

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.0

      - name: Terraform Format Check
        run: |
          cd terraform
          terraform fmt -check

      - name: Terraform Init
        run: |
          cd terraform
          terraform init

      - name: Terraform Validate
        run: |
          cd terraform
          terraform validate

  check_images:
    name: Check Required Images
    runs-on: ubuntu-latest
    needs: validate
    if: github.event.inputs.action == 'apply'
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: '${{ env.WORKLOAD_IDENTITY_PROVIDER }}'
          service_account: '${{ env.SERVICE_ACCOUNT_EMAIL }}'

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Check Migration Image Exists
        run: |
          echo "Checking for migration image..."
          MIGRATION_TAG="${{ github.event.inputs.migration_image_tag }}"
          MIGRATION_IMAGE="gcr.io/${{ env.PROJECT_ID }}/safehouse-migrations:${MIGRATION_TAG}"
          
          if gcloud container images describe $MIGRATION_IMAGE --format="value(name)" >/dev/null 2>&1; then
            echo "Migration image found: $MIGRATION_IMAGE"
          else
            echo "ERROR: Migration image not found!"
            echo "Expected: $MIGRATION_IMAGE"
            exit 1
          fi

      - name: Check Backend Image Exists (if specified)
        if: github.event.inputs.backend_image_tag != 'latest'
        run: |
          echo "Checking for backend image..."
          BACKEND_TAG="${{ github.event.inputs.backend_image_tag }}"
          BACKEND_IMAGE="gcr.io/${{ env.PROJECT_ID }}/safehouse-backend-main:${BACKEND_TAG}"
          
          if gcloud container images describe $BACKEND_IMAGE --format="value(name)" >/dev/null 2>&1; then
            echo "Backend image found: $BACKEND_IMAGE"
          else
            echo "WARNING: Backend image not found: $BACKEND_IMAGE"
            echo "Will attempt to use existing image in Terraform"
          fi

      - name: Check Frontend Image Exists (if specified)
        if: github.event.inputs.frontend_image_tag != 'latest'
        run: |
          echo "Checking for frontend image..."
          FRONTEND_TAG="${{ github.event.inputs.frontend_image_tag }}"
          FRONTEND_IMAGE="gcr.io/${{ env.PROJECT_ID }}/safehouse-frontend-main:${FRONTEND_TAG}"
          
          if gcloud container images describe $FRONTEND_IMAGE --format="value(name)" >/dev/null 2>&1; then
            echo "Frontend image found: $FRONTEND_IMAGE"
          else
            echo "WARNING: Frontend image not found: $FRONTEND_IMAGE"
            echo "Will attempt to use existing image in Terraform"
          fi

  plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: validate
    if: github.event.inputs.action == 'plan' || github.event.inputs.action == 'apply' || github.event.inputs.action == 'destroy'
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: '${{ env.WORKLOAD_IDENTITY_PROVIDER }}'
          service_account: '${{ env.SERVICE_ACCOUNT_EMAIL }}'

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.0

      - name: Terraform Init
        run: |
          cd terraform
          terraform init

      - name: Terraform Plan
        run: |
          cd terraform
          echo "Planning infrastructure changes"
          echo "Using production configuration: terraform.tfvars"
          echo "Migration image: gcr.io/${{ env.PROJECT_ID }}/safehouse-migrations:${{ github.event.inputs.migration_image_tag }}"
          echo "Backend image: gcr.io/${{ env.PROJECT_ID }}/safehouse-backend-main:${{ github.event.inputs.backend_image_tag }}"
          echo "Frontend image: gcr.io/${{ env.PROJECT_ID }}/safehouse-frontend-main:${{ github.event.inputs.frontend_image_tag }}"
          
          # Set Terraform variables for image tags
          TF_VAR_migration_image_tag="${{ github.event.inputs.migration_image_tag }}" \
          TF_VAR_backend_image_tag="${{ github.event.inputs.backend_image_tag }}" \
          TF_VAR_frontend_image_tag="${{ github.event.inputs.frontend_image_tag }}" \
          terraform plan \
            -var-file="terraform.tfvars" \
            -var="migration_image_tag=${{ github.event.inputs.migration_image_tag }}" \
            -var="backend_image_tag=${{ github.event.inputs.backend_image_tag }}" \
            -var="frontend_image_tag=${{ github.event.inputs.frontend_image_tag }}" \
            $(if [ "${{ github.event.inputs.action }}" == "destroy" ]; then echo "-destroy"; fi) \
            -out=tfplan

      - name: Show Plan Summary
        run: |
          cd terraform
          echo "## Terraform Plan Summary"
          echo "**Action:** ${{ github.event.inputs.action }}"
          echo "**Environment:** Production"
          echo "**Project:** ${{ env.PROJECT_ID }}"
          echo "**Triggered by:** @${{ github.actor }}"
          echo "**Commit:** ${{ github.sha }}"
          echo ""
          echo "**Image Configuration:**"
          echo "- **Migration Image:** \`gcr.io/${{ env.PROJECT_ID }}/safehouse-migrations:${{ github.event.inputs.migration_image_tag }}\`"
          echo "- **Backend Image:** \`gcr.io/${{ env.PROJECT_ID }}/safehouse-backend-main:${{ github.event.inputs.backend_image_tag }}\`"
          echo "- **Frontend Image:** \`gcr.io/${{ env.PROJECT_ID }}/safehouse-frontend-main:${{ github.event.inputs.frontend_image_tag }}\`"
          echo ""
          echo "**Migration Handling:** Automatic (via Terraform)"
          echo ""
          echo "### Plan Output:"
          terraform show -no-color tfplan

      - name: Upload Plan Artifact
        if: github.event.inputs.action == 'apply' || github.event.inputs.action == 'destroy'
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-${{ github.run_number }}
          path: terraform/tfplan
          retention-days: 7

  apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: [plan, check_images]
    if: (github.event.inputs.action == 'apply' || github.event.inputs.action == 'destroy') && github.event.inputs.confirm_apply == 'yes'
    environment: production
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: '${{ env.WORKLOAD_IDENTITY_PROVIDER }}'
          service_account: '${{ env.SERVICE_ACCOUNT_EMAIL }}'

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.0

      - name: Download Plan Artifact
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan-${{ github.run_number }}
          path: terraform/

      - name: Terraform Init
        run: |
          cd terraform
          terraform init

      - name: Configure Docker for Image Pull
        run: |
          gcloud auth configure-docker

      - name: Terraform Apply
        run: |
          cd terraform
          echo "Applying Terraform configuration..."
          echo "Migration image: gcr.io/${{ env.PROJECT_ID }}/safehouse-migrations:${{ github.event.inputs.migration_image_tag }}"
          echo "Backend image: gcr.io/${{ env.PROJECT_ID }}/safehouse-backend-main:${{ github.event.inputs.backend_image_tag }}"
          echo "Frontend image: gcr.io/${{ env.PROJECT_ID }}/safehouse-frontend-main:${{ github.event.inputs.frontend_image_tag }}"
          echo ""
          
          terraform apply tfplan

      - name: Terraform Output
        if: github.event.inputs.action == 'apply'
        id: output
        run: |
          cd terraform
          echo "## Terraform Outputs"
          terraform output

      - name: Verify Deployment
        if: github.event.inputs.action == 'apply'
        run: |
          echo "Verifying deployment status..."
          
          BACKEND_URL=$(cd terraform && terraform output -raw cloud_run_url)
          echo "Backend URL: $BACKEND_URL"
          
          FRONTEND_URL=$(cd terraform && terraform output -raw frontend_url)
          echo "Frontend URL: $FRONTEND_URL"
          
          echo "Deployment verification completed"

      - name: Store Deployment Info
        if: github.event.inputs.action == 'apply' && success()
        run: |
          cd terraform
          cat > deployment-info.json << EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "environment": "production",
            "orchestration_repository": "${{ github.event.repository.name }}",
            "commit": "${{ github.sha }}",
            "actor": "${{ github.actor }}",
            "workflow_run": "${{ github.run_number }}",
            "project_id": "${{ env.PROJECT_ID }}",
            "images": {
              "migration": "gcr.io/${{ env.PROJECT_ID }}/safehouse-migrations:${{ github.event.inputs.migration_image_tag }}",
              "backend": "gcr.io/${{ env.PROJECT_ID }}/safehouse-backend-main:${{ github.event.inputs.backend_image_tag }}",
              "frontend": "gcr.io/${{ env.PROJECT_ID }}/safehouse-frontend-main:${{ github.event.inputs.frontend_image_tag }}"
            },
            "deployment_method": "terraform_with_specified_images",
            "infrastructure_components": {
              "cloud_run": "deployed",
              "cloud_sql": "deployed", 
              "migrations": "applied",
              "vpc_network": "deployed",
              "secrets": "deployed"
            }
          }
          EOF
          
          echo "Production infrastructure deployment completed successfully!"
          echo "Deployment metadata:"
          cat deployment-info.json

      - name: Final Success Notification
        if: success()
        run: |
          if [ "${{ github.event.inputs.action }}" == "destroy" ]; then
            echo "Production infrastructure destruction completed successfully!"
            echo "All Safehouse production resources have been removed."
            echo "Orchestrated by: @${{ github.actor }}"
          else
            echo "DEPLOYMENT COMPLETED SUCCESSFULLY!"
            echo "=================================="
            echo ""
            echo "Infrastructure Status:"
            echo "   • Database: Deployed and migrated"
            echo "   • Backend Service: Deployed"
            echo "   • Frontend Service: Deployed"
            echo "   • VPC & Networking: Configured"
            echo "   • Security & Secrets: Configured"
            echo ""
            echo "Image Configuration:"
            echo "   • Migration: gcr.io/${{ env.PROJECT_ID }}/safehouse-migrations:${{ github.event.inputs.migration_image_tag }}"
            echo "   • Backend: gcr.io/${{ env.PROJECT_ID }}/safehouse-backend-main:${{ github.event.inputs.backend_image_tag }}"
            echo "   • Frontend: gcr.io/${{ env.PROJECT_ID }}/safehouse-frontend-main:${{ github.event.inputs.frontend_image_tag }}"
            echo ""
            echo "Orchestrated by: @${{ github.actor }}"
            echo "Commit: ${{ github.sha }}"
            echo "Completed: $(date -u +%Y-%m-%dT%H:%M:%SZ)"
          fi

      - name: Deployment Failure Notification
        if: failure()
        run: |
          echo "Production infrastructure ${{ github.event.inputs.action }} failed!"
          echo "Check the logs above for detailed error information."
          echo "Orchestrated by: @${{ github.actor }}"
          echo ""
          echo "Image Configuration Used:"
          echo "   • Migration: gcr.io/${{ env.PROJECT_ID }}/safehouse-migrations:${{ github.event.inputs.migration_image_tag }}"
          echo "   • Backend: gcr.io/${{ env.PROJECT_ID }}/safehouse-backend-main:${{ github.event.inputs.backend_image_tag }}"
          echo "   • Frontend: gcr.io/${{ env.PROJECT_ID }}/safehouse-frontend-main:${{ github.event.inputs.frontend_image_tag }}"
          exit 1

  safety_check:
    name: Safety Check
    runs-on: ubuntu-latest
    if: (github.event.inputs.action == 'apply' || github.event.inputs.action == 'destroy') && github.event.inputs.confirm_apply != 'yes'

    steps:
      - name: Safety Warning
        run: |
          echo "PRODUCTION SAFETY CHECK FAILED"
          echo "=================================="
          echo ""
          echo "You selected '${{ github.event.inputs.action }}' but didn't confirm with 'yes'"
          echo ""
          echo "To ${{ github.event.inputs.action }} PRODUCTION infrastructure:"
          echo "1. Set 'Action' to '${{ github.event.inputs.action }}'"
          echo "2. Set 'Type yes to confirm' to 'yes'"
          echo "3. Run the workflow again"
          echo ""
          echo "This prevents accidental production changes!"
          echo "Repository: ${{ github.event.repository.name }}"
          
          if [ "${{ github.event.inputs.action }}" == "destroy" ]; then
            echo ""
            echo "DESTROY will remove ALL production resources:"
            echo "   - All databases and stored data"
            echo "   - All running services and applications"
            echo "   - All network configurations"
            echo "   - All storage and backup data"
          fi
          
          exit 1
